name: Run unit tests

on:
  push:
    branches: [ master ] 
  pull_request:
    branches: [ master ] 

jobs:

  test:
    name: Test
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:12-alpine
        env:
          POSTGRES_USER: root
          POSTGRES_PASSWORD: secret
          POSTGRES_DB: simple_bank
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - name: Gitleals scan
      run:  export VER="1.24.0" &&  wget https://github.com/zricethezav/gitleaks/releases/download/v$VER/gitleaks-linux-amd64 && mv gitleaks-linux-amd64 gitleaks && chmod +x gitleaks && sudo mv gitleaks /usr/local/bin/ && gitleaks --repo=https://github.com/mani7444/Gitaction-demo-eks.git
    
    - name: Set up Go 1.x
      uses: actions/setup-go@v2
      with:
        go-version: ^1.16
      id: go

    - name: Check out code into the Go module directory
      uses: actions/checkout@v2
    - name: semgrep scan
      run: python3 -m pip install semgrep && semgrep --config=auto $(pwd)
    - name: Install golang-migrate
      run: |
        curl -L https://github.com/golang-migrate/migrate/releases/download/v4.14.1/migrate.linux-amd64.tar.gz | tar xvz
        sudo mv migrate.linux-amd64 /usr/bin/migrate
        which migrate
    - uses: actions/checkout@v2
      with:
        fetch-depth: 0
    - uses: sonarsource/sonarqube-scan-action@master
      env:
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
   # - name: Checkout
  #    uses: actions/checkout@v2
    - name: Depcheck
      uses: dependency-check/Dependency-Check_Action@main
      id: Depcheck
      with:
        project: 'test'
        path: '.'
        format: 'HTML'    
        args: >
            --failOnCVSS 7
            --enableRetired
    - name: Run migrations
      run: make migrateup

    - name: Test
      run: make test
    - name: Reports
    - run: actions/checkout@master
    - name: Validate links
      uses: ad-m/report-link-action@master
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
 #   - name: Check out code
 #     uses: actions/checkout@v2

#    - name: Install kubectl
#      uses: azure/setup-kubectl@v1
#      with:
#        version: 'v1.21.3'
#      id: install

#    - name: Configure AWS credentials
#      uses: aws-actions/configure-aws-credentials@v1
#      with:
#        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
#        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#        aws-region: us-east-2
#
#    - name: Login to Amazon ECR
#      id: login-ecr
#      uses: aws-actions/amazon-ecr-login@v1
#
#    - name: Load secrets and save to app.env
#      run: aws secretsmanager get-secret-value --secret-id simple_bank --query SecretString --output text | jq -r 'to_entries|map("\(.key)=\(.value)")|.[]' > app.env

#    - name: Build, tag, and push image to Amazon ECR
#      env:
#        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
#        ECR_REPOSITORY: docker_ecr_demo
#        IMAGE_TAG: ${{ github.sha }}
#      run: |
#        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG -t $ECR_REGISTRY/$ECR_REPOSITORY:latest .
#        docker push -a $ECR_REGISTRY/$ECR_REPOSITORY
#    - name: Trivy scan
#      run: wget https://github.com/aquasecurity/trivy/releases/download/v0.18.3/trivy_0.18.3_Linux-64bit.deb && sudo dpkg -i trivy_0.18.3_Linux-64bit.deb && trivy image golang:1.16-alpine3.13
#    - name: Kubernetes set context
#      run: aws eks update-kubeconfig --name basic-cluster --region us-east-2

#    - name: Deploy image to Amazon EKS
#      run: |
#        kubectl apply -f eks/aws-auth.yaml 
#        kubectl apply -f eks/deployment.yaml
#        kubectl apply -f eks/service.yaml
#        kubectl apply -f eks/ingress.yaml 
#    - name: kubesccape scan
#      run: curl -s https://raw.githubusercontent.com/armosec/kubescape/master/install.sh | /bin/bash && kubescape scan --submit 
#    - name: Defectdojo Report
#      run: curl -X POST "http://208.167.242.196:8080/api/v2/import-scan/" -H  "accept: application/json" -H  "Authorization: Token 17d83e3c23ed4c684821411146c373a2347d50f7" -H  "Content-Type: multipart/form-data" -F "minimum_severity=Info" -F "active=true" -F "verified=true" -F "scan_type=Dependency Check Scan" -F "product_type_name=Git_action_demo" -F "product_name=Golang" -F "engagement_name=SecondEngagement" -F "engagement=2" -F "test_title=Dependency check" -F "close_old_findings=false" -F "push_to_jira=false" -F "group_by=file_path"   
        
